#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spelling_Bee
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SpellingBeeDatabase")]
	public partial class SpellingBeeDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTestQuestion(TestQuestion instance);
    partial void UpdateTestQuestion(TestQuestion instance);
    partial void DeleteTestQuestion(TestQuestion instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStudentClass(StudentClass instance);
    partial void UpdateStudentClass(StudentClass instance);
    partial void DeleteStudentClass(StudentClass instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertTestQuestionResult(TestQuestionResult instance);
    partial void UpdateTestQuestionResult(TestQuestionResult instance);
    partial void DeleteTestQuestionResult(TestQuestionResult instance);
    partial void InsertTestResult(TestResult instance);
    partial void UpdateTestResult(TestResult instance);
    partial void DeleteTestResult(TestResult instance);
    partial void InsertTest(Test instance);
    partial void UpdateTest(Test instance);
    partial void DeleteTest(Test instance);
    #endregion
		
		public SpellingBeeDataClassesDataContext() : 
				base(global::Spelling_Bee.Properties.Settings.Default.SpellingBeeDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SpellingBeeDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpellingBeeDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpellingBeeDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpellingBeeDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TestQuestion> TestQuestions
		{
			get
			{
				return this.GetTable<TestQuestion>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StudentClass> StudentClasses
		{
			get
			{
				return this.GetTable<StudentClass>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<TestQuestionResult> TestQuestionResults
		{
			get
			{
				return this.GetTable<TestQuestionResult>();
			}
		}
		
		public System.Data.Linq.Table<TestResult> TestResults
		{
			get
			{
				return this.GetTable<TestResult>();
			}
		}
		
		public System.Data.Linq.Table<Test> Tests
		{
			get
			{
				return this.GetTable<Test>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestQuestions")]
	public partial class TestQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestQuestionID;
		
		private System.Nullable<int> _TestID;
		
		private string _Question;
		
		private string _Answer;
		
		private System.Nullable<int> _QuestionNumber;
		
		private EntitySet<TestQuestionResult> _TestQuestionResults;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestQuestionIDChanging(int value);
    partial void OnTestQuestionIDChanged();
    partial void OnTestIDChanging(System.Nullable<int> value);
    partial void OnTestIDChanged();
    partial void OnQuestionChanging(string value);
    partial void OnQuestionChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnQuestionNumberChanging(System.Nullable<int> value);
    partial void OnQuestionNumberChanged();
    #endregion
		
		public TestQuestion()
		{
			this._TestQuestionResults = new EntitySet<TestQuestionResult>(new Action<TestQuestionResult>(this.attach_TestQuestionResults), new Action<TestQuestionResult>(this.detach_TestQuestionResults));
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestQuestionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestQuestionID
		{
			get
			{
				return this._TestQuestionID;
			}
			set
			{
				if ((this._TestQuestionID != value))
				{
					this.OnTestQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._TestQuestionID = value;
					this.SendPropertyChanged("TestQuestionID");
					this.OnTestQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int")]
		public System.Nullable<int> TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Question", DbType="VarChar(512)")]
		public string Question
		{
			get
			{
				return this._Question;
			}
			set
			{
				if ((this._Question != value))
				{
					this.OnQuestionChanging(value);
					this.SendPropertyChanging();
					this._Question = value;
					this.SendPropertyChanged("Question");
					this.OnQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(256)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionNumber", DbType="Int")]
		public System.Nullable<int> QuestionNumber
		{
			get
			{
				return this._QuestionNumber;
			}
			set
			{
				if ((this._QuestionNumber != value))
				{
					this.OnQuestionNumberChanging(value);
					this.SendPropertyChanging();
					this._QuestionNumber = value;
					this.SendPropertyChanged("QuestionNumber");
					this.OnQuestionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestQuestion_TestQuestionResult", Storage="_TestQuestionResults", ThisKey="TestQuestionID", OtherKey="QuestionID")]
		public EntitySet<TestQuestionResult> TestQuestionResults
		{
			get
			{
				return this._TestQuestionResults;
			}
			set
			{
				this._TestQuestionResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestQuestion", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestQuestions.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestQuestions.Add(this);
						this._TestID = value.TestID;
					}
					else
					{
						this._TestID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestQuestionResults(TestQuestionResult entity)
		{
			this.SendPropertyChanging();
			entity.TestQuestion = this;
		}
		
		private void detach_TestQuestionResults(TestQuestionResult entity)
		{
			this.SendPropertyChanging();
			entity.TestQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffID;
		
		private string _StaffPassword;
		
		private string _StaffPrefix;
		
		private string _StaffForename;
		
		private string _StaffSurname;
		
		private System.Nullable<bool> _IsAdministrative;
		
		private EntitySet<Class> _Classes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(int value);
    partial void OnStaffIDChanged();
    partial void OnStaffPasswordChanging(string value);
    partial void OnStaffPasswordChanged();
    partial void OnStaffPrefixChanging(string value);
    partial void OnStaffPrefixChanged();
    partial void OnStaffForenameChanging(string value);
    partial void OnStaffForenameChanged();
    partial void OnStaffSurnameChanging(string value);
    partial void OnStaffSurnameChanged();
    partial void OnIsAdministrativeChanging(System.Nullable<bool> value);
    partial void OnIsAdministrativeChanged();
    #endregion
		
		public Staff()
		{
			this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffPassword", DbType="VarChar(256)")]
		public string StaffPassword
		{
			get
			{
				return this._StaffPassword;
			}
			set
			{
				if ((this._StaffPassword != value))
				{
					this.OnStaffPasswordChanging(value);
					this.SendPropertyChanging();
					this._StaffPassword = value;
					this.SendPropertyChanged("StaffPassword");
					this.OnStaffPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffPrefix", DbType="VarChar(256)")]
		public string StaffPrefix
		{
			get
			{
				return this._StaffPrefix;
			}
			set
			{
				if ((this._StaffPrefix != value))
				{
					this.OnStaffPrefixChanging(value);
					this.SendPropertyChanging();
					this._StaffPrefix = value;
					this.SendPropertyChanged("StaffPrefix");
					this.OnStaffPrefixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffForename", DbType="VarChar(256)")]
		public string StaffForename
		{
			get
			{
				return this._StaffForename;
			}
			set
			{
				if ((this._StaffForename != value))
				{
					this.OnStaffForenameChanging(value);
					this.SendPropertyChanging();
					this._StaffForename = value;
					this.SendPropertyChanged("StaffForename");
					this.OnStaffForenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffSurname", DbType="VarChar(256)")]
		public string StaffSurname
		{
			get
			{
				return this._StaffSurname;
			}
			set
			{
				if ((this._StaffSurname != value))
				{
					this.OnStaffSurnameChanging(value);
					this.SendPropertyChanging();
					this._StaffSurname = value;
					this.SendPropertyChanged("StaffSurname");
					this.OnStaffSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdministrative", DbType="Bit")]
		public System.Nullable<bool> IsAdministrative
		{
			get
			{
				return this._IsAdministrative;
			}
			set
			{
				if ((this._IsAdministrative != value))
				{
					this.OnIsAdministrativeChanging(value);
					this.SendPropertyChanging();
					this._IsAdministrative = value;
					this.SendPropertyChanged("IsAdministrative");
					this.OnIsAdministrativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Class", Storage="_Classes", ThisKey="StaffID", OtherKey="TeacherID")]
		public EntitySet<Class> Classes
		{
			get
			{
				return this._Classes;
			}
			set
			{
				this._Classes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Classes(Class entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentClasses")]
	public partial class StudentClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentClassID;
		
		private int _ClassID;
		
		private int _StudentID;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentClassIDChanging(int value);
    partial void OnStudentClassIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    #endregion
		
		public StudentClass()
		{
			this._Class = default(EntityRef<Class>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentClassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentClassID
		{
			get
			{
				return this._StudentClassID;
			}
			set
			{
				if ((this._StudentClassID != value))
				{
					this.OnStudentClassIDChanging(value);
					this.SendPropertyChanging();
					this._StudentClassID = value;
					this.SendPropertyChanged("StudentClassID");
					this.OnStudentClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int NOT NULL")]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_StudentClass", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.StudentClasses.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.StudentClasses.Add(this);
						this._ClassID = value.ClassID;
					}
					else
					{
						this._ClassID = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentClass", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentClasses.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentClasses.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classes")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassID;
		
		private System.Nullable<int> _TeacherID;
		
		private string _ClassName;
		
		private System.Nullable<int> _ClassYear;
		
		private EntitySet<StudentClass> _StudentClasses;
		
		private EntitySet<Test> _Tests;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnTeacherIDChanging(System.Nullable<int> value);
    partial void OnTeacherIDChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnClassYearChanging(System.Nullable<int> value);
    partial void OnClassYearChanged();
    #endregion
		
		public Class()
		{
			this._StudentClasses = new EntitySet<StudentClass>(new Action<StudentClass>(this.attach_StudentClasses), new Action<StudentClass>(this.detach_StudentClasses));
			this._Tests = new EntitySet<Test>(new Action<Test>(this.attach_Tests), new Action<Test>(this.detach_Tests));
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="Int")]
		public System.Nullable<int> TeacherID
		{
			get
			{
				return this._TeacherID;
			}
			set
			{
				if ((this._TeacherID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIDChanging(value);
					this.SendPropertyChanging();
					this._TeacherID = value;
					this.SendPropertyChanged("TeacherID");
					this.OnTeacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="VarChar(256)")]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassYear", DbType="Int")]
		public System.Nullable<int> ClassYear
		{
			get
			{
				return this._ClassYear;
			}
			set
			{
				if ((this._ClassYear != value))
				{
					this.OnClassYearChanging(value);
					this.SendPropertyChanging();
					this._ClassYear = value;
					this.SendPropertyChanged("ClassYear");
					this.OnClassYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_StudentClass", Storage="_StudentClasses", ThisKey="ClassID", OtherKey="ClassID")]
		public EntitySet<StudentClass> StudentClasses
		{
			get
			{
				return this._StudentClasses;
			}
			set
			{
				this._StudentClasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Test", Storage="_Tests", ThisKey="ClassID", OtherKey="ClassID")]
		public EntitySet<Test> Tests
		{
			get
			{
				return this._Tests;
			}
			set
			{
				this._Tests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Class", Storage="_Staff", ThisKey="TeacherID", OtherKey="StaffID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Classes.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Classes.Add(this);
						this._TeacherID = value.StaffID;
					}
					else
					{
						this._TeacherID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentClasses(StudentClass entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_StudentClasses(StudentClass entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Tests(Test entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentID;
		
		private string _StudentName;
		
		private int _StudentYear;
		
		private string _StudentPassword;
		
		private System.DateTime _StudentDOB;
		
		private EntitySet<StudentClass> _StudentClasses;
		
		private EntitySet<TestResult> _TestResults;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(int value);
    partial void OnStudentIDChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    partial void OnStudentYearChanging(int value);
    partial void OnStudentYearChanged();
    partial void OnStudentPasswordChanging(string value);
    partial void OnStudentPasswordChanged();
    partial void OnStudentDOBChanging(System.DateTime value);
    partial void OnStudentDOBChanged();
    #endregion
		
		public Student()
		{
			this._StudentClasses = new EntitySet<StudentClass>(new Action<StudentClass>(this.attach_StudentClasses), new Action<StudentClass>(this.detach_StudentClasses));
			this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string StudentName
		{
			get
			{
				return this._StudentName;
			}
			set
			{
				if ((this._StudentName != value))
				{
					this.OnStudentNameChanging(value);
					this.SendPropertyChanging();
					this._StudentName = value;
					this.SendPropertyChanged("StudentName");
					this.OnStudentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentYear", DbType="Int NOT NULL")]
		public int StudentYear
		{
			get
			{
				return this._StudentYear;
			}
			set
			{
				if ((this._StudentYear != value))
				{
					this.OnStudentYearChanging(value);
					this.SendPropertyChanging();
					this._StudentYear = value;
					this.SendPropertyChanged("StudentYear");
					this.OnStudentYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentPassword", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string StudentPassword
		{
			get
			{
				return this._StudentPassword;
			}
			set
			{
				if ((this._StudentPassword != value))
				{
					this.OnStudentPasswordChanging(value);
					this.SendPropertyChanging();
					this._StudentPassword = value;
					this.SendPropertyChanged("StudentPassword");
					this.OnStudentPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentDOB", DbType="DateTime NOT NULL")]
		public System.DateTime StudentDOB
		{
			get
			{
				return this._StudentDOB;
			}
			set
			{
				if ((this._StudentDOB != value))
				{
					this.OnStudentDOBChanging(value);
					this.SendPropertyChanging();
					this._StudentDOB = value;
					this.SendPropertyChanged("StudentDOB");
					this.OnStudentDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentClass", Storage="_StudentClasses", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<StudentClass> StudentClasses
		{
			get
			{
				return this._StudentClasses;
			}
			set
			{
				this._StudentClasses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_TestResult", Storage="_TestResults", ThisKey="StudentID", OtherKey="StudentID")]
		public EntitySet<TestResult> TestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				this._TestResults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentClasses(StudentClass entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentClasses(StudentClass entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestQuestionResults")]
	public partial class TestQuestionResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestQuestionResultID;
		
		private System.Nullable<int> _ResultsID;
		
		private System.Nullable<int> _QuestionID;
		
		private string _Answer;
		
		private System.Nullable<int> _Score;
		
		private EntityRef<TestQuestion> _TestQuestion;
		
		private EntityRef<TestResult> _TestResult;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestQuestionResultIDChanging(int value);
    partial void OnTestQuestionResultIDChanged();
    partial void OnResultsIDChanging(System.Nullable<int> value);
    partial void OnResultsIDChanged();
    partial void OnQuestionIDChanging(System.Nullable<int> value);
    partial void OnQuestionIDChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    #endregion
		
		public TestQuestionResult()
		{
			this._TestQuestion = default(EntityRef<TestQuestion>);
			this._TestResult = default(EntityRef<TestResult>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestQuestionResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestQuestionResultID
		{
			get
			{
				return this._TestQuestionResultID;
			}
			set
			{
				if ((this._TestQuestionResultID != value))
				{
					this.OnTestQuestionResultIDChanging(value);
					this.SendPropertyChanging();
					this._TestQuestionResultID = value;
					this.SendPropertyChanged("TestQuestionResultID");
					this.OnTestQuestionResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultsID", DbType="Int")]
		public System.Nullable<int> ResultsID
		{
			get
			{
				return this._ResultsID;
			}
			set
			{
				if ((this._ResultsID != value))
				{
					if (this._TestResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultsIDChanging(value);
					this.SendPropertyChanging();
					this._ResultsID = value;
					this.SendPropertyChanged("ResultsID");
					this.OnResultsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionID", DbType="Int")]
		public System.Nullable<int> QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					if (this._TestQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="VarChar(50)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestQuestion_TestQuestionResult", Storage="_TestQuestion", ThisKey="QuestionID", OtherKey="TestQuestionID", IsForeignKey=true)]
		public TestQuestion TestQuestion
		{
			get
			{
				return this._TestQuestion.Entity;
			}
			set
			{
				TestQuestion previousValue = this._TestQuestion.Entity;
				if (((previousValue != value) 
							|| (this._TestQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestQuestion.Entity = null;
						previousValue.TestQuestionResults.Remove(this);
					}
					this._TestQuestion.Entity = value;
					if ((value != null))
					{
						value.TestQuestionResults.Add(this);
						this._QuestionID = value.TestQuestionID;
					}
					else
					{
						this._QuestionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestResult_TestQuestionResult", Storage="_TestResult", ThisKey="ResultsID", OtherKey="ResultsID", IsForeignKey=true)]
		public TestResult TestResult
		{
			get
			{
				return this._TestResult.Entity;
			}
			set
			{
				TestResult previousValue = this._TestResult.Entity;
				if (((previousValue != value) 
							|| (this._TestResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestResult.Entity = null;
						previousValue.TestQuestionResults.Remove(this);
					}
					this._TestResult.Entity = value;
					if ((value != null))
					{
						value.TestQuestionResults.Add(this);
						this._ResultsID = value.ResultsID;
					}
					else
					{
						this._ResultsID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestResult");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestResults")]
	public partial class TestResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResultsID;
		
		private System.Nullable<int> _TestID;
		
		private System.Nullable<int> _StudentID;
		
		private System.Nullable<int> _Score;
		
		private EntitySet<TestQuestionResult> _TestQuestionResults;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Test> _Test;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultsIDChanging(int value);
    partial void OnResultsIDChanged();
    partial void OnTestIDChanging(System.Nullable<int> value);
    partial void OnTestIDChanged();
    partial void OnStudentIDChanging(System.Nullable<int> value);
    partial void OnStudentIDChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    #endregion
		
		public TestResult()
		{
			this._TestQuestionResults = new EntitySet<TestQuestionResult>(new Action<TestQuestionResult>(this.attach_TestQuestionResults), new Action<TestQuestionResult>(this.detach_TestQuestionResults));
			this._Student = default(EntityRef<Student>);
			this._Test = default(EntityRef<Test>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ResultsID
		{
			get
			{
				return this._ResultsID;
			}
			set
			{
				if ((this._ResultsID != value))
				{
					this.OnResultsIDChanging(value);
					this.SendPropertyChanging();
					this._ResultsID = value;
					this.SendPropertyChanged("ResultsID");
					this.OnResultsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", DbType="Int")]
		public System.Nullable<int> TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					if (this._Test.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int")]
		public System.Nullable<int> StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestResult_TestQuestionResult", Storage="_TestQuestionResults", ThisKey="ResultsID", OtherKey="ResultsID")]
		public EntitySet<TestQuestionResult> TestQuestionResults
		{
			get
			{
				return this._TestQuestionResults;
			}
			set
			{
				this._TestQuestionResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_TestResult", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.TestResults.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.TestResults.Add(this);
						this._StudentID = value.StudentID;
					}
					else
					{
						this._StudentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestResult", Storage="_Test", ThisKey="TestID", OtherKey="TestID", IsForeignKey=true)]
		public Test Test
		{
			get
			{
				return this._Test.Entity;
			}
			set
			{
				Test previousValue = this._Test.Entity;
				if (((previousValue != value) 
							|| (this._Test.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test.Entity = null;
						previousValue.TestResults.Remove(this);
					}
					this._Test.Entity = value;
					if ((value != null))
					{
						value.TestResults.Add(this);
						this._TestID = value.TestID;
					}
					else
					{
						this._TestID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Test");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestQuestionResults(TestQuestionResult entity)
		{
			this.SendPropertyChanging();
			entity.TestResult = this;
		}
		
		private void detach_TestQuestionResults(TestQuestionResult entity)
		{
			this.SendPropertyChanging();
			entity.TestResult = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tests")]
	public partial class Test : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TestID;
		
		private System.Nullable<int> _ClassID;
		
		private string _TestName;
		
		private System.Nullable<int> _TestYear;
		
		private System.Nullable<int> _TestTimeLength;
		
		private System.Nullable<System.DateTime> _TestBegin;
		
		private System.Nullable<bool> _LastTestOfTerm;
		
		private System.Nullable<bool> _LastTestOfYear;
		
		private System.Nullable<bool> _WholeYearTest;
		
		private System.Nullable<bool> _LastTestActionExecuted;
		
		private System.Nullable<bool> _TestOpen;
		
		private EntitySet<TestQuestion> _TestQuestions;
		
		private EntitySet<TestResult> _TestResults;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTestIDChanging(int value);
    partial void OnTestIDChanged();
    partial void OnClassIDChanging(System.Nullable<int> value);
    partial void OnClassIDChanged();
    partial void OnTestNameChanging(string value);
    partial void OnTestNameChanged();
    partial void OnTestYearChanging(System.Nullable<int> value);
    partial void OnTestYearChanged();
    partial void OnTestTimeLengthChanging(System.Nullable<int> value);
    partial void OnTestTimeLengthChanged();
    partial void OnTestBeginChanging(System.Nullable<System.DateTime> value);
    partial void OnTestBeginChanged();
    partial void OnLastTestOfTermChanging(System.Nullable<bool> value);
    partial void OnLastTestOfTermChanged();
    partial void OnLastTestOfYearChanging(System.Nullable<bool> value);
    partial void OnLastTestOfYearChanged();
    partial void OnWholeYearTestChanging(System.Nullable<bool> value);
    partial void OnWholeYearTestChanged();
    partial void OnLastTestActionExecutedChanging(System.Nullable<bool> value);
    partial void OnLastTestActionExecutedChanged();
    partial void OnTestOpenChanging(System.Nullable<bool> value);
    partial void OnTestOpenChanged();
    #endregion
		
		public Test()
		{
			this._TestQuestions = new EntitySet<TestQuestion>(new Action<TestQuestion>(this.attach_TestQuestions), new Action<TestQuestion>(this.detach_TestQuestions));
			this._TestResults = new EntitySet<TestResult>(new Action<TestResult>(this.attach_TestResults), new Action<TestResult>(this.detach_TestResults));
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int")]
		public System.Nullable<int> ClassID
		{
			get
			{
				return this._ClassID;
			}
			set
			{
				if ((this._ClassID != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIDChanging(value);
					this.SendPropertyChanging();
					this._ClassID = value;
					this.SendPropertyChanged("ClassID");
					this.OnClassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestName", DbType="VarChar(256)")]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this.OnTestNameChanging(value);
					this.SendPropertyChanging();
					this._TestName = value;
					this.SendPropertyChanged("TestName");
					this.OnTestNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestYear", DbType="Int")]
		public System.Nullable<int> TestYear
		{
			get
			{
				return this._TestYear;
			}
			set
			{
				if ((this._TestYear != value))
				{
					this.OnTestYearChanging(value);
					this.SendPropertyChanging();
					this._TestYear = value;
					this.SendPropertyChanged("TestYear");
					this.OnTestYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestTimeLength", DbType="Int")]
		public System.Nullable<int> TestTimeLength
		{
			get
			{
				return this._TestTimeLength;
			}
			set
			{
				if ((this._TestTimeLength != value))
				{
					this.OnTestTimeLengthChanging(value);
					this.SendPropertyChanging();
					this._TestTimeLength = value;
					this.SendPropertyChanged("TestTimeLength");
					this.OnTestTimeLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestBegin", DbType="DateTime")]
		public System.Nullable<System.DateTime> TestBegin
		{
			get
			{
				return this._TestBegin;
			}
			set
			{
				if ((this._TestBegin != value))
				{
					this.OnTestBeginChanging(value);
					this.SendPropertyChanging();
					this._TestBegin = value;
					this.SendPropertyChanged("TestBegin");
					this.OnTestBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastTestOfTerm", DbType="Bit")]
		public System.Nullable<bool> LastTestOfTerm
		{
			get
			{
				return this._LastTestOfTerm;
			}
			set
			{
				if ((this._LastTestOfTerm != value))
				{
					this.OnLastTestOfTermChanging(value);
					this.SendPropertyChanging();
					this._LastTestOfTerm = value;
					this.SendPropertyChanged("LastTestOfTerm");
					this.OnLastTestOfTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastTestOfYear", DbType="Bit")]
		public System.Nullable<bool> LastTestOfYear
		{
			get
			{
				return this._LastTestOfYear;
			}
			set
			{
				if ((this._LastTestOfYear != value))
				{
					this.OnLastTestOfYearChanging(value);
					this.SendPropertyChanging();
					this._LastTestOfYear = value;
					this.SendPropertyChanged("LastTestOfYear");
					this.OnLastTestOfYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WholeYearTest", DbType="Bit")]
		public System.Nullable<bool> WholeYearTest
		{
			get
			{
				return this._WholeYearTest;
			}
			set
			{
				if ((this._WholeYearTest != value))
				{
					this.OnWholeYearTestChanging(value);
					this.SendPropertyChanging();
					this._WholeYearTest = value;
					this.SendPropertyChanged("WholeYearTest");
					this.OnWholeYearTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastTestActionExecuted", DbType="Bit")]
		public System.Nullable<bool> LastTestActionExecuted
		{
			get
			{
				return this._LastTestActionExecuted;
			}
			set
			{
				if ((this._LastTestActionExecuted != value))
				{
					this.OnLastTestActionExecutedChanging(value);
					this.SendPropertyChanging();
					this._LastTestActionExecuted = value;
					this.SendPropertyChanged("LastTestActionExecuted");
					this.OnLastTestActionExecutedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestOpen", DbType="Bit")]
		public System.Nullable<bool> TestOpen
		{
			get
			{
				return this._TestOpen;
			}
			set
			{
				if ((this._TestOpen != value))
				{
					this.OnTestOpenChanging(value);
					this.SendPropertyChanging();
					this._TestOpen = value;
					this.SendPropertyChanged("TestOpen");
					this.OnTestOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestQuestion", Storage="_TestQuestions", ThisKey="TestID", OtherKey="TestID")]
		public EntitySet<TestQuestion> TestQuestions
		{
			get
			{
				return this._TestQuestions;
			}
			set
			{
				this._TestQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Test_TestResult", Storage="_TestResults", ThisKey="TestID", OtherKey="TestID")]
		public EntitySet<TestResult> TestResults
		{
			get
			{
				return this._TestResults;
			}
			set
			{
				this._TestResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Test", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Tests.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Tests.Add(this);
						this._ClassID = value.ClassID;
					}
					else
					{
						this._ClassID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestQuestions(TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_TestQuestions(TestQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
		
		private void attach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Test = this;
		}
		
		private void detach_TestResults(TestResult entity)
		{
			this.SendPropertyChanging();
			entity.Test = null;
		}
	}
}
#pragma warning restore 1591
